"use client";
import React, { useState } from "react";
import Step2Popup, { Step2PopupData } from "@/components/step2popup";

const popupData: Step2PopupData[] = [
  {
    title: "Ï†ú 1Ï°∞(Î™©Ï†Å)",
    period: "Í≥ÑÏïΩ Í∏∞Í∞ÑÏùÄ 2024ÎÖÑ 1Ïõî 1ÏùºÎ∂ÄÌÑ∞ 2025ÎÖÑ 12Ïõî 31ÏùºÍπåÏßÄÏù¥Îã§.",
    reason: "Í≥ÑÏïΩ Î™©Ï†ÅÏù¥ Î™ÖÌôïÌïòÏßÄ ÏïäÏùå.",
    result: "Í≥ÑÏïΩ Î™©Ï†ÅÏùÑ Íµ¨Ï≤¥Ï†ÅÏúºÎ°ú Î™ÖÏãúÌï®.",
    strategy: "Í≥ÑÏïΩ Î™©Ï†ÅÏùÑ Î™ÖÌôïÌûà ÌïòÏó¨ Î∂ÑÏüÅ ÏòàÎ∞©.",
    laws: ["ÎØºÎ≤ï Ï†ú103Ï°∞"],
    precedents: ["ÎåÄÎ≤ïÏõê 2010Îã§12345"]
  },
  {
    title: "Ï†ú 2Ï°∞(Ï°¥ÏÜçÍ∏∞Í∞Ñ)",
    period: "Í≥ÑÏïΩ Í∏∞Í∞ÑÏùÄ 2024ÎÖÑ 7Ïõî 1ÏùºÎ∂ÄÌÑ∞ 2026ÎÖÑ 6Ïõî 30ÏùºÍπåÏßÄÏù¥Îã§.",
    reason: "Í≥ÑÏïΩÍ∏∞Í∞ÑÏù¥ 2ÎÖÑÏù¥ ÎÑòÏñ¥Í∞ÄÏöî.",
    result: "Í≥ÑÏïΩ Í∏∞Í∞ÑÏù¥ ÎÅùÎÇòÍ∏∞ Ï†ÑÏóê Ìï¥ÏßÄÌï† Ïàò ÏóÜÏùå.",
    strategy: "ÏßÄÏó∞Ïù¥ÏûêÏú®ÏùÑ Î™ÖÌôïÌûà ÌïòÏó¨ ÏûÑÏ∞®Ïù∏Ïùò ÏòàÏ∏° Í∞ÄÎä•ÏÑ± ÌôïÎ≥¥.",
    laws: ["ÏÜåÎìùÏÑ∏Î≤ï ÏãúÌñâÎ†π Ï†ú122Ï°∞ Ï†ú 1Ìï≠"],
    precedents: ["ÏÑúÏö∏Ï§ëÏïôÎ≤ï 2029Í∞ÄÌï©18", "Î∂ÄÏÇ∞ÏßÄÎ≤ï 1818Í∞ÄÌï©18"]
  },
  {
    title: "Ï†ú 3Ï°∞(Ïö©ÎèÑ Î≥ÄÍ≤Ω)",
    period: "Í≥ÑÏïΩ Í∏∞Í∞ÑÏùÄ 2024ÎÖÑ 3Ïõî 1ÏùºÎ∂ÄÌÑ∞ 2025ÎÖÑ 2Ïõî 28ÏùºÍπåÏßÄÏù¥Îã§.",
    reason: "Ïö©ÎèÑ Î≥ÄÍ≤ΩÏóê ÎåÄÌïú Ï†úÌïúÏù¥ ÏóÜÏùå.",
    result: "Ïö©ÎèÑ Î≥ÄÍ≤Ω Ïãú ÏÇ¨Ï†Ñ ÎèôÏùò ÌïÑÏöî.",
    strategy: "Ïö©ÎèÑ Î≥ÄÍ≤Ω Ï°∞Í±¥ÏùÑ Î™ÖÌôïÌûà ÌïòÏó¨ Î∂ÑÏüÅ ÏòàÎ∞©.",
    laws: ["ÏÉÅÍ∞ÄÍ±¥Î¨º ÏûÑÎåÄÏ∞®Î≥¥Ìò∏Î≤ï Ï†ú10Ï°∞"],
    precedents: ["ÎåÄÎ≤ïÏõê 2015Îã§67890"]
  },
  // ... ÌïÑÏöîÏãú Îçî Ï∂îÍ∞Ä
];

const StatusIndicator = ({ status }: { status: "ok" | "check" }) => {
  const color = status === "ok" ? "#32D74B" : "#FF9400";
  return (
    <span
      className="w-3 h-3 rounded-full"
      style={{ backgroundColor: color }}
    />
  );
};

const BackTopIcon = ({ className = "", style = {} }: { className?: string; style?: React.CSSProperties }) => (
  <img src="/back_top.svg" alt="back" className={className} style={style} draggable={false} />
);

const MoreDocIcon = ({ className = "", style = {} }: { className?: string; style?: React.CSSProperties }) => (
  <img src="/more_doc.svg" alt="more" className={className} style={style} draggable={false} />
);

const ArticleItem = ({ title, status, onClick }: { title: string; status: "ok" | "check"; onClick: () => void }) => (
  <div onClick={onClick} className="flex items-center w-[353px] h-[46px] bg-white/75 border border-[#f3f4f6] rounded-2xl px-5 mx-auto cursor-pointer">
    <StatusIndicator status={status} />
    <span className="ml-4 text-[14px] font-medium text-black/70">{title}</span>
    <span className="ml-auto flex items-center">
      <MoreDocIcon className="w-6 h-6 align-middle" />
    </span>
  </div>
);

export default function ContractAnalysisPage() {
    const [popupIndex, setPopupIndex] = useState<number|null>(null);

    const openPopup = (idx: number) => {
        setPopupIndex(idx);
    };
    const closePopup = () => {
        setPopupIndex(null);
    };
    const goPrev = () => {
        if (popupIndex !== null && popupIndex > 0) setPopupIndex(popupIndex - 1);
    };
    const goNext = () => {
        if (popupIndex !== null && popupIndex < popupData.length - 1) setPopupIndex(popupIndex + 1);
    };

  return (
    <div className="w-[393px] h-[852px] mx-auto bg-[#f2f1f6] font-['Pretendard'] flex flex-col relative overflow-hidden">
      {/* Header */}
      <header className="absolute top-0 left-0 right-0 h-[117px] z-20">
        <div className="absolute inset-0 bg-white/20 backdrop-blur-sm" />
        <div className="relative flex items-center h-full px-[24px] pb-[18px]" style={{gap:10}}>
          <BackTopIcon className="w-6 h-6 min-w-[24px] min-h-[24px]" />
          <h1 className="text-[16px] font-bold ml-3">Í≥ÑÏïΩÏÑú Î∂ÑÏÑù Í≤∞Í≥º</h1>
        </div>
      </header>
      
      {/* Spacer for header */}
      <div className="h-[117px] flex-shrink-0"/>

      <main className="flex-grow flex flex-col">
        {/* Status Legend */}
        <div className="flex justify-center my-8">
            <div className="flex items-center gap-6 bg-white/90 rounded-full px-5 py-3 text-sm shadow-sm border border-gray-200/80">
                <div className="flex items-center gap-2">
                    <StatusIndicator status="ok" />
                    <span className="text-[#32D74B] text-[14px] font-medium tracking-tighter">-Î¨∏Ï†ú ÏóÜÏùå</span>
                </div>
                <div className="flex items-center gap-2">
                    <StatusIndicator status="check" />
                    <span className="text-[#FF9400] text-[14px] font-medium tracking-tighter">-ÌôïÏù∏ ÌïÑÏöî</span>
                </div>
            </div>
        </div>

        {/* Article List */}
        <div className="flex-grow bg-white/70 rounded-t-[40px] border border-b-0 border-[#f3f4f6] pt-5 pb-24 overflow-hidden">
            <div className="flex items-center justify-center mb-7">
                <h2 className="text-[18px] font-semibold text-center">Í≥ÑÏïΩ Ï°∞Ìï≠ Î™©Î°ù</h2>
            </div>
            <div className="h-full overflow-y-auto space-y-3 pb-8">
                {popupData.map((article, index) => (
                    <ArticleItem key={index} title={article.title} status={index % 2 === 0 ? "ok" : "check"} onClick={() => openPopup(index)} />
                ))}
            </div>
        </div>
      </main>

      {/* Footer */}
      <footer className="absolute bottom-0 left-0 right-0 h-[96px] z-20">
        <div className="absolute inset-0 bg-white/20 backdrop-blur-sm" />
        <div className="relative flex justify-center items-center h-full">
            <div className="flex items-center justify-center w-[320px] h-[50px] bg-white border border-[#d6d6d6] rounded-full shadow-lg px-4">
               <span className="text-[18px] font-semibold text-[#0e0e0e]">
                    üîç Í≥ÑÏïΩ Ï°∞Ìï≠ Î∂ÑÏÑù Í≤∞Í≥º
               </span>
            </div>
        </div>
      </footer>
      
      {/* Popup Modal */}
      {popupIndex !== null && (
          <div className="absolute inset-0 z-30 flex items-center justify-center">
              <div 
                  className="absolute inset-0 bg-black/30 backdrop-blur-sm"
                  onClick={closePopup}
              />
              <div className="relative w-[340px] h-[800px]">
                 <Step2Popup
                    data={popupData[popupIndex]}
                    onClose={closePopup}
                    onPrev={goPrev}
                    onNext={goNext}
                    showPrev={popupIndex > 0}
                    showNext={popupIndex < popupData.length - 1}
                 />
              </div>
          </div>
      )}

    </div>
  );
}